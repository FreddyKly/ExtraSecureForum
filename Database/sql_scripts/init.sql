CREATE DATABASE IF NOT EXISTS SecureDatabase;
USE SecureDatabase;
CREATE TABLE IF NOT EXISTS `Users` (
    `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
    `username` VARCHAR(20) NOT NULL,
    `passw` varchar(255) NOT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    PRIMARY KEY (`id`)
);
CREATE TABLE IF NOT EXISTS `Threads` (
    `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
    `title` TINYTEXT NOT NULL,
    `post` TEXT NOT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
    PRIMARY KEY (`id`)
);
CREATE TABLE IF NOT EXISTS `Answers` (
    `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
    `thread_id` INTEGER UNSIGNED NOT NULL,
    `post` TEXT NOT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
    PRIMARY KEY (`id`),
    CONSTRAINT `fk_thread`
        FOREIGN KEY (`thread_id`) REFERENCES `Threads` (`id`)
        ON DELETE CASCADE
);


INSERT INTO SecureDatabase.Users (username, passw, created_at)
VALUES (
    "admin",
    "41e5653fc7aeb894026d6bb7b2db7f65902b454945fa8fd65a6327047b5277fb",
    DEFAULT
);
INSERT INTO SecureDatabase.Threads (title, post, created_at, updated_at)
VALUES (
    "Cross-Site Scripting",
    "Cross-Site Scripting (XSS) is a type of security vulnerability that allows an attacker to inject malicious scripts into web pages viewed by other users. This can be used to steal sensitive information, hijack user sessions, or perform other malicious actions. XSS attacks can be classified into two types: stored and reflected. Stored XSS occurs when the malicious script is stored on the server and served to multiple users, while reflected XSS occurs when the script is generated in response to user input and executed in the user's browser. To prevent XSS, it is important to properly sanitize user input and encode any special characters.",
    DEFAULT,
    DEFAULT
);
INSERT INTO SecureDatabase.Threads (title, post, created_at, updated_at)
VALUES (
    "SQL Injections",
    "SQL Injection is a type of security vulnerability that occurs when an attacker is able to inject malicious SQL code into a database query. This allows the attacker to retrieve, modify, or delete sensitive information from the database. SQL injections can be caused by failing to properly validate user input in web applications, which can result in malicious input being interpreted as part of the SQL query. To prevent SQL injection attacks, it is important to use parameterized queries and to sanitize all user input before using it in a database query.",
    DEFAULT,
    DEFAULT
);
INSERT INTO SecureDatabase.Threads (title, post, created_at, updated_at)
VALUES (
    "SHA256",
    "SHA-265 is a secure cryptographic hash function, but it has some limitations. While it is still considered secure for many use cases, it has been shown to be vulnerable to some attacks, such as collision attacks and preimage attacks. In recent years, some attackers have been able to leverage the increasing computational power of specialized hardware to perform these attacks more efficiently. Additionally, SHA-265 has a fixed output size, meaning that hashes generated by the algorithm will always be the same length. This can make it easier for attackers to perform brute-force attacks by generating hashes and comparing them to the target hash. For these reasons, it is recommended to use stronger cryptographic hash functions, such as SHA-3 or BLAKE2, for security-critical applications.",
    DEFAULT,
    DEFAULT
);
INSERT INTO SecureDatabase.Threads (title, post, created_at, updated_at)
VALUES (
    "Brute-force Attacks",
    "A brute force attack is a type of cybersecurity attack where an attacker systematically tries every possible combination of inputs in an attempt to guess the correct answer or find a weakness in the system. In the context of passwords, for example, a brute force attack would involve automatically generating and trying many different password combinations until the correct one is found. Brute force attacks can be time-consuming and resource-intensive, but they can be successful if the attacker has enough computing power and the system being attacked has a weak password policy. To prevent brute force attacks, it is important to use strong, unique passwords and to implement rate limiting, which slows down the rate at which attempts can be made. Additionally, using two-factor authentication and encryption can also help to protect against brute force attacks.",
    DEFAULT,
    DEFAULT
);
INSERT INTO SecureDatabase.Answers (thread_id, post, created_at, updated_at)
VALUES (
    2,
    "Wow, this was so informative. Now I can hack my favorite website :) 5/5",
    DEFAULT,
    DEFAULT
);
INSERT INTO SecureDatabase.Answers (thread_id, post, created_at, updated_at)
VALUES (
    1,
    "Is it illegal to use this to mine bitcoin?",
    DEFAULT,
    DEFAULT
);